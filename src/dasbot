#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright (C) 2012 Herman Torjussen
# Last edited by 2012 Sindre Wetjen
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://gnu.org/licenses/>.


import re
import os
import sys
import getopt
try:
    import GlobalConfig as conf
except ImportError: 
    from shutil import copyfile as cp
    cp("GlobalConfig.py.template", "GlobalConfig.py")
    import GlobalConfig as conf

import IRCFonts
from AuthBot import AuthBot as Bot

def die(msg):
    sys.stderr.write(str(msg) + "\n")
    sys.exit(1)

def ckarg(opt, arg):
    if arg == "" or arg in longopts or arg in shortopts:
        die("error: option {} needs at least one argument".format(opt))

def usage():
    return (
    "usage: {prog} OPTION\n"
    "   -v, --verbose           display verbose messages\n"
    "   -d, --debug             display debugging messages\n"
    "   -h, --help              show this help message\n"
    "   -a, --auth              use authentication\n"
    "   -c, --chan <channels>   connect to startup channels\n"
    "   -p, --port <port>       use host port number\n"
    "   -s, --serv <host>       use host server\n"
    "   -n, --nick <nick>       use channel nick\n"
    "   -u, --plugin <plug>     load plugins\n"
    "   -l, --log <file>        log to specified file\n"
    "   --dont-reconnect        Don't reconnect on ping out.\n"
    "   -t, --tries <number>    Number of reconnect tries.\n"
    "   --timeout <sec>         Seconds to wait before reconnecting.\n"
    
    "examples:\n"
    "   {prog} --verbose --auth --chan iskbot,fubot --nick r0b0tNicK\n"
    "   {prog} -vac iskbot,fubot -n r0b0tNicK").format(prog = sys.argv[0])


if __name__ == '__main__':

    if sys.argv[1:]:

        validhost = r"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$"
        validnick = r"^[a-zA-Z_\-\[\]\\^{}|`][a-zA-Z0-9_\-\[\]\\^{}|`]*$"

        longopts = ["--verbose", "--debug", "--help", "--chan=", "--port=", "--serv=", "--nick=", "--plugin=", "--auth", "--log=", "--cron", "--tries=", "--timeout=", "--dont-reconnect"]
        shortopts = ["-v", "-d" "-h", "-c", "-p", "-s", "-n", "-u", "-a", "-l", "-o", "-t"]
        optstring = ":vdhaoc:p:s:n:u:l:"
        argdelim = ","

        
        try:
            options, args = getopt.getopt(sys.argv[1:], optstring, [o.strip("--") for o in longopts])
        except getopt.GetoptError as err:
            print(str(err))
            die("see {} --help for usage".format(sys.argv[0]))
        
        for opt, arg in options:
            if opt in ("-v", "--verbose"):
                conf.VERBOSE = True
            elif opt in ("-d", "--debug"):
                conf.DEBUG = True
            elif opt in ("-h", "--help"):
                print(usage())
                sys.exit(0)
            elif opt in ("-a", "--auth"):
                conf.AUTHENTICATION = True
            elif opt in ("-c" , "--chan"):
                ckarg(opt, arg)
                chans = list()
                for chan in arg.split(argdelim):
                    if chan != "":
                        if not chan.startswith("#"):
                            chan = "#" + chan
                        chans.append(chan)
                conf.STARTUP_CHANNELS = chans
            elif opt in ("-p", "--port"):
                ckarg(opt, arg)
                if not arg.isdigit():
                    die("bad port number value")
                arg = int(arg)
                if not arg in range(6660,6670):
                    die("port number should be in range 6660-6670")
                conf.PORT = int(arg)
            elif opt in ("-s", "--serv"):
                ckarg(opt, arg)
                if not re.match(validhost, arg):
                    die("malformed host address")
                conf.HOST = arg 
            elif opt in ("-n", "--nick"):
                ckarg(opt, arg)
                if not re.match(validnick, arg):
                    die("malformed irc nick")
                conf.NICK = arg
            elif opt in ("-u", "--plugin"):
                ckarg(opt, arg)
                plugs = list()
                for plug in arg.split(argdelim):
                    if plug != "":
                        plugs.append(plug)
                conf.LOAD_PLUGINS = plugs
            elif opt in ("-l", "--log"):
                ckarg(opt, arg)
                conf.LOG_FILE = arg
            elif opt in ("-o", "--cron"):
                conf.START_CRON_BOT = True
            elif opt in ("-t", "--tries"):
                ckarg(opt, arg)
                conf.RECONNECT_TRIES = int(arg)
            elif opt in "--dont-reconnect":
                conf.RECONNECT=False
            elif opt in "--timeout":
                ckarg(opt, arg)
                conf.RECONNECT_TIMEOUT = int(arg)
            else:
                assert False, "unhandled option"
                die("see {} --help for usage".format(sys.argv[0]))

    if conf.CHANGE_RUNTIME_USER:
        os.setgid(conf.GID)
        os.setuid(conf.UID)
    
    bot = Bot()
    bot.start(reconnect=conf.RECONNECT, reconnect_timeout=conf.RECONNECT_TIMEOUT,
              tries=conf.RECONNECT_TRIES)
    bot.stop()
    sys.exit(0)
